// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// uncomment for PostgreSQL
enum ReservationStatus {
  WAITING_FOR_CONFIRMATION
  CONFIRMED
  CANCELLED
}

enum CleaningFrequency {
  ONCE
  ONCE_A_WEEK
  EVERY_TWO_WEEKS
}

model User {
  id                        String                       @id @default(cuid())
  name                      String?                      @db.VarChar(50)
  surname                   String?                      @db.VarChar(50)
  username                  String                       @unique @db.VarChar(30)
  email                     String                       @unique @db.VarChar(40)
  password                  String                       @db.VarChar(32)
  phone                     String?                      @db.VarChar(15)
  recurringReservations     RecurringReservation[]
}

model Reservation {
  id                        String                       @id @default(cuid())
  name                      String                       @db.VarChar(30)
  date                      DateTime                     @db.Date
  startDate                 DateTime                     @db.Date
  endDate                   DateTime                     @db.Date
  includeDetergents         Boolean 
  cost                      Decimal                      @db.Money // or @db.Decimal(4,2)
  recurringReservation      RecurringReservation         @relation(fields: [recurringReservationId], references: [id])
  recurringReservationId    String                       @unique @map("reservationGroupId")
  status                    ReservationStatus
}

model RecurringReservation {
  id                        String                       @id @default(cuid())
  name                      String                       @db.VarChar(50)
  frequency                 CleaningFrequency
  endDate                   DateTime
  user                      User                         @relation(fields: [userId], references: [id])
  userId                    String                       @unique
  reservations              Reservation[]
  residence                 Residence                    @relation(fields: [residenceId], references: [id])
  residenceId               String                       @unique
	@@map("ReservationGroup")
}

model Residence {
  id                        String                       @id @default(cuid())
  areaSize                  Decimal                      @db.Money // or // @db.Decimal(4,2)
  street                    String                       @db.VarChar(40)
  houseNumber               Int         
  postCode                  String                       @db.VarChar(5)
  city                      String                       @db.VarChar(40)
  recurringReservations     RecurringReservation[]
}

model Service {
  id                        Int                          @id @default(autoincrement())
  name                      String                       @db.VarChar(100)
  price                     Decimal                      @db.Money // or // @db.Decimal(4,2)
  employees                 Employee[]
}

model Employee {
  id                        String                       @id @default(cuid())
  name                      String                       @db.VarChar(50)
  surname                   String                       @db.VarChar(50)
  email                     String                       @unique  @db.VarChar(40)
  password                  String                       @db.VarChar(32)
  availability              DateTime     
  services                  Service[]
  isAdmin                   Boolean                      @default(false)
}