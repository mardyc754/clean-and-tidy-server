// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum ReservationStatus {
  TO_BE_CONFIRMED @map("WAITING_FOR_CONFIRMATION")
  ACTIVE @map("CONFIRMED")
  CLOSED
  TO_BE_CANCELLED
  CANCELLED
}

enum RecurringReservationStatus {
  TO_BE_CONFIRMED @map("WAITING_FOR_CONFIRMATION")
  ACTIVE
  CLOSED
  TO_BE_CANCELLED
  CANCELLED
}

enum CleaningFrequency {
  ONCE
  ONCE_A_WEEK
  EVERY_TWO_WEEKS
}

model User {
  id                        Int                          @id @default(autoincrement())
  name                      String?                      @db.VarChar(50)
  surname                   String?                      @db.VarChar(50)
  username                  String                       @unique @db.VarChar(30)
  email                     String                       @unique @db.VarChar(40)
  password                  String                       @db.VarChar(32)
  phone                     String?                      @db.VarChar(15)
  recurringReservations     RecurringReservation[]
}

model Reservation {
  id                        Int                          @id @default(autoincrement())
  name                      String                       @db.VarChar(30)
  startDate                 DateTime                     @db.Date
  endDate                   DateTime                     @db.Date
  includeDetergents         Boolean 
  cost                      Decimal                      @db.Money // or @db.Decimal(4,2)
  recurringReservation      RecurringReservation         @relation(fields: [recurringReservationId], references: [id])
  recurringReservationId    Int                          @unique @map("reservationGroupId")
  status                    ReservationStatus
}

model RecurringReservation {
  id                        Int                          @id @default(autoincrement())
  name                      String                       @db.VarChar(50)
  frequency                 CleaningFrequency
  endDate                   DateTime  // not sure if this field is needed
  weekDay                   Int                          @db.SmallInt
  status                    RecurringReservationStatus
  user                      User                         @relation(fields: [userId], references: [id])
  userId                    Int                          @unique
  reservations              Reservation[]
  address                   Address                      @relation(fields: [addressId], references: [id])
  addressId                 Int                          @unique
  service                   Service                      @relation(fields: [serviceId], references: [id])
  serviceId                 Int                          @unique
	@@map("ReservationGroup")
}

model Address {
  id                        Int                          @id @default(autoincrement())
  areaSize                  Decimal                      @db.Money // or // @db.Decimal(4,2)
  street                    String                       @db.VarChar(40)
  houseNumber               Int         
  postCode                  String                       @db.VarChar(5)
  city                      String                       @db.VarChar(40)
  recurringReservations     RecurringReservation[]
	@@map("Residence")
}

model Service {
  id                        Int                          @id @default(autoincrement())
  name                      String                       @db.VarChar(100)
  price                     Decimal                      @db.Money // or // @db.Decimal(4,2)
  employees                 Employee[]
  recurringReservations     RecurringReservation[]
}

model Employee {
  id                        Int                          @id @default(autoincrement())
  name                      String                       @db.VarChar(50)
  surname                   String                       @db.VarChar(50)
  email                     String                       @unique  @db.VarChar(40)
  password                  String                       @db.VarChar(32)
  availability              DateTime     
  services                  Service[]
  isAdmin                   Boolean                      @default(false)
}