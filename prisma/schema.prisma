// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider            = "postgresql"
  url                 = env("DATABASE_URL")
  shadowDatabaseUrl   = env("SHADOW_DATABASE_URL")
}

enum Status {
  TO_BE_CONFIRMED
  ACTIVE
  CLOSED
  TO_BE_CANCELLED
  CANCELLED
}

enum Frequency {
  ONCE
  ONCE_A_WEEK
  EVERY_TWO_WEEKS
  ONCE_A_MONTH
}

model Client {
  id                            Int                           @id @default(autoincrement())
  firstName                     String?                       @db.VarChar(50)
  lastName                      String?                       @db.VarChar(50)
  email                         String                        @unique @db.VarChar(40)
  password                      String?                       @db.VarChar(60)
  phone                         String?                       @db.VarChar(15)
  reservations                  Reservation[]
}

model Visit {
  id                            Int                           @id @default(autoincrement())
  detergentsCost                Decimal                       @db.Money 
  reservation                   Reservation                   @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId                 Int                          
  visitParts                    VisitPart[]  
  canDateBeChanged              Boolean                       @default(true)
}

model Reservation {
  id                            Int                           @id @default(autoincrement())
  name                          String                        @db.VarChar(100) @unique
  frequency                     Frequency
  status                        Status
  client                        Client?                       @relation(fields: [bookerEmail], references: [email])
  bookerEmail                   String?                          
  visits                        Visit[]
  addressId                     Int                           @unique
  address                       Address                       @relation(fields: [addressId], references: [id], onDelete: Cascade)
  bookerFirstName               String                        @db.VarChar(50)
  bookerLastName                String                        @db.VarChar(50)
  extraInfo                     String?                       @db.VarChar(500)
  services                      ReservationService[]
}

model Address {
  id                            Int                           @id @default(autoincrement())
  street                        String                        @db.VarChar(100)
  houseNumber                   String                        @db.VarChar(6)        
  postCode                      String                        @db.VarChar(6)
  reservation                   Reservation?
}


model Employee {
  id                            Int                           @id @default(autoincrement())
  firstName                     String                        @db.VarChar(50)
  lastName                      String                        @db.VarChar(50)
  email                         String                        @unique  @db.VarChar(40)
  password                      String                        @db.VarChar(60)
  phone                         String?                       @db.VarChar(15)
  services                      EmployeeService[]
  isAdmin                       Boolean                       @default(false)
}

model Service {
  id                            Int                           @id @default(autoincrement())
  name                          String                        @db.VarChar(100)
  isPrimary                     Boolean                       @default(false)
  minNumberOfUnitsIfPrimary     Int?
  minCostIfPrimary              Decimal?                      @db.Money        
  unitId                        Int?                          @unique
  unit                          Unit?                         @relation(fields: [unitId], references: [id], onDelete: Cascade)
  detergentsCost                Decimal                       @db.Money @default(0)
  employees                     EmployeeService[]
  cleaningFrequencies           CleaningFrequency[]
  reservations                  ReservationService[]
  primaryServices               Service[]                     @relation("PrimarySecondaryService")
  secondaryServices             Service[]                     @relation("PrimarySecondaryService")
}

model Unit {
  id                            Int                           @id @default(autoincrement())
  shortName                     String                        @db.VarChar(40)
  fullName                      String                        @db.VarChar(60)
  price                         Decimal                       @db.Money
  duration                      Int                           // duration of the service unit in minutes
  service                       Service?                     
}


model EmployeeService {
  employee                      Employee                      @relation(fields: [employeeId], references: [id])
  employeeId                    Int                           
  service                       Service                       @relation(fields: [serviceId], references: [id])
  serviceId                     Int                           
  visitParts                    VisitPart[]
  
  @@id([employeeId, serviceId])
}

model CleaningFrequency {
  id                            Int                           @id @default(autoincrement())
  name                          String 
  value                         Frequency                     @unique
  services                      Service[]
}

model ReservationService {
  reservation                   Reservation                   @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId                 Int                          
  service                       Service                       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId                     Int
  isMainServiceForReservation   Boolean                       @default(false)
  
  @@id([reservationId, serviceId])
}


model VisitPart {
  id                               Int                           @id @default(autoincrement())
  visit                            Visit                         @relation(fields: [visitId], references: [id], onDelete: Cascade)
  visitId                          Int 
  serviceId                        Int
  employeeService                  EmployeeService               @relation(fields: [employeeId, serviceId], references: [employeeId, serviceId], onDelete: Cascade)
  employeeId                       Int
  startDate                        DateTime
  endDate                          DateTime
  status                           Status                        @default(TO_BE_CONFIRMED)
  cost                             Decimal                       @db.Money
  numberOfUnits                    Int
}



