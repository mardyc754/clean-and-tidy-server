// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider            = "postgresql"
  url                 = env("DATABASE_URL")
  shadowDatabaseUrl   = env("SHADOW_DATABASE_URL")
}

enum Status {
  TO_BE_CONFIRMED
  ACTIVE
  CLOSED
  TO_BE_CANCELLED
  CANCELLED
}

enum Frequency {
  ONCE
  ONCE_A_WEEK
  EVERY_TWO_WEEKS
  ONCE_A_MONTH
}

model Client {
  id                            Int                           @id @default(autoincrement())
  firstName                     String?                       @db.VarChar(50)
  lastName                      String?                       @db.VarChar(50)
  username                      String?                       @unique @db.VarChar(30)
  email                         String                        @unique @db.VarChar(40)
  password                      String?                       @db.VarChar(60)
  phone                         String?                       @db.VarChar(15)
  reservations                  Reservation[]
}

model Visit {
  id                            Int                           @id @default(autoincrement()) // maybe it should be UUID
  name                          String                        @db.VarChar(100) @unique
  startDate                     DateTime
  endDate                       DateTime
  includeDetergents             Boolean 
  cost                          Decimal                       @db.Money
  reservation                   Reservation                   @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId                 Int                          
  employees                     VisitEmployee[]                                          
}

model Reservation {
  id                            Int                           @id @default(autoincrement()) // maybe it should be UUID
  name                          String                        @db.VarChar(100) @unique
  frequency                     Frequency
  endDate                       DateTime  // not sure if this field is needed
  weekDay                       Int                           @db.SmallInt
  status                        Status
  client                        Client                        @relation(fields: [bookerEmail], references: [email], onDelete: Cascade)
  bookerEmail                   String                          
  visits                        Visit[]
  address                       Address                       @relation(fields: [addressId], references: [id])
  addressId                     Int                          
  services                      ReservationService[]
  bookerFirstName               String                        @db.VarChar(50)
  bookerLastName                String                        @db.VarChar(50)
}

model Address {
  id                            Int                           @id @default(autoincrement())
  street                        String                        @db.VarChar(40)
  houseNumber                   String                        @db.VarChar(6)        
  postCode                      String                        @db.VarChar(6)
  city                          String                        @db.VarChar(40)
  reservations                  Reservation[]
}


model Employee {
  id                            Int                           @id @default(autoincrement())
  firstName                     String                        @db.VarChar(50)
  lastName                      String                        @db.VarChar(50)
  email                         String                        @unique  @db.VarChar(40)
  password                      String                        @db.VarChar(60)
  startHour                     DateTime                      @db.Time
  endHour                       DateTime                      @db.Time      
  visits                        VisitEmployee[]
  services                      Service[]
  isAdmin                       Boolean                       @default(false)
}

model Service {
  id                            Int                           @id @default(autoincrement())
  name                          String                        @db.VarChar(100)
  unit                          Unit?                         @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId                        Int?                          @unique
  isPrimary                     Boolean                       @default(false)
  employees                     Employee[]
  primaryServices               Service[]                     @relation("PrimarySecondaryService")
  secondaryServices             Service[]                     @relation("PrimarySecondaryService")
  cleaningFrequencies           CleaningFrequency[]
  reservations                  ReservationService[] 
  minNumberOfUnitsIfPrimary     Int?
  minCostIfPrimary              Decimal?                      @db.Money        
}

model Unit {
  id                            Int                           @id @default(autoincrement())
  name                          String                        @db.VarChar(40)
  price                         Decimal                       @db.Money
  duration                      Int                           // duration of the service unit in minutes
  service                       Service?                     
}

model CleaningFrequency {
  id                            Int                           @id @default(autoincrement())
  name                          String 
  value                         Frequency                     @unique
  services                      Service[]
}

model ReservationService {
  reservation                   Reservation                   @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId                 Int                          
  service                       Service                       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId                     Int
  isMainServiceForReservation   Boolean                       @default(false)
  numberOfUnits                 Int                           @default(1)
  
  @@id([reservationId, serviceId])
}

model VisitEmployee {
  visit                         Visit                         @relation(fields: [visitId], references: [id], onDelete: Cascade)
  visitId                       Int                           
  employee                      Employee                      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId                    Int                           
  status                        Status                        
  @@id([visitId, employeeId])

}
